<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Dockerize Python Web Apps</title>
      <link href="/2019/11/26/Dockerize-python-web-app/"/>
      <url>/2019/11/26/Dockerize-python-web-app/</url>
      
        <content type="html"><![CDATA[<p>This tutorial is intended for Docker beginners. </p><p>We will use a Django web app as an example, but it can be easily substituted with other web apps such as flask, tornado, etc.</p><h2 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h2><ul><li>have docker installed on your local machine</li><li>a <code>requirements.txt</code> for all the dependencies of the app</li></ul><h2 id="Writing-the-Dockerfile"><a href="#Writing-the-Dockerfile" class="headerlink" title="Writing the Dockerfile"></a>Writing the Dockerfile</h2><h3 id="Choosing-a-base-image"><a href="#Choosing-a-base-image" class="headerlink" title="Choosing a base image"></a>Choosing a base image</h3><p>Every Dockerfile has a base image. Choosing the correct base image is important, because docker images tend to be very large in size, and can potentially cause trouble in space and be costly. Bigger images also needs more time to build.</p><p>If you have some time to do research, that’s good, but generally speaking I would recommend try the basic one for now, and then you can switch to a smaller one later. For example, for any python projects you can start with python:3.6, or whatever the version of python you’re using; and then after everything is working, you can switch to python:3.6-slim, or alpine. </p><p>At the end of this tutorial (or maybe in the next tutorial?) I will also provide a way to use multi-stage building to reduce the image size but still have what you need in the slim version.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Dockerfile</span><br><span class="line">FROM python:3.6</span><br></pre></td></tr></table></figure><p>Dockerfile almost always starts with the <code>FROM</code> command. The <code>FROM</code> command specifies which base image you want to build on top of. </p><p>Don’t forget to provide the tag, otherwise docker will automatically use <code>latest</code> as tag, and it might not be want you want. Check Docker Hub for available tags, don’t just make it up.</p><p>You can always use other local images as base. For example, if I already have a custom image called <code>kelly</code> locally, I can use <code>kelly:latest</code> in my Dockerfile.</p><h3 id="Installing-system-packages"><a href="#Installing-system-packages" class="headerlink" title="Installing system packages"></a>Installing system packages</h3><p>This step is actually optional – if you don’t need any system level packages, such as MySQL-related packages, you can skip this step.</p><p>It is common to use Debian/Ubuntu based images, so the first thing you would do is likely just update and install some system packages that you need with the <code>apt</code> or <code>apt-get</code> command. </p><p>The official python image is also Debian-based, so we can easily write something like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN apt-get update &amp;&amp; apt-get install -y mysql-client</span><br></pre></td></tr></table></figure><p>The <code>RUN</code> command executes any provided commands in a new layer on top of the current image. </p><p>One thing to keep in mind is, docker images have multiple layers; the more layers, the bigger the file size. That’s why it is common to use <code>&amp;&amp;</code> to concatenate commands into one line in order to reduce layers. </p><h3 id="Installing-python-dependencies"><a href="#Installing-python-dependencies" class="headerlink" title="Installing python dependencies"></a>Installing python dependencies</h3><p>Now we can finally install python dependencies. I recommend a two-step method here – first copy just the <code>requirements.txt</code> and install all the dependencies, and then copy the code.</p><p>This might seem counter intuitive. If <code>requirements.txt</code> is part of my code, why can’t I copy everything at once? The reason is to save build time. When you’re developing, the code will change in almost every commit. Since docker is built on layers, if any layers change, all the layers on top of it need to change. This means if we copy all the code in this layer ans run <code>pip install</code> in next layer, everytime the code changes, you need to re-install everything when building a new image. What about if we reverse it? If we only install dependencies now, and then copy the code in next layer, as long as your <code>requirements.txt</code> stays the same, you don’t have to rebuild this layer again. In rapid development process, this saves a lot of time. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COPY requirements.txt .</span><br><span class="line">RUN pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>The <code>COPY</code> command adds a file or directory from the host machine into the image. Here we need it to copy the <code>requirements.txt</code> to access it inside the image.</p><h3 id="Copy-your-code"><a href="#Copy-your-code" class="headerlink" title="Copy your code"></a>Copy your code</h3><p>We’re almost there! The next step is to copy the code.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /app</span><br><span class="line">ADD . /app</span><br></pre></td></tr></table></figure><p>The <code>WORKDIR</code> command sets the working directory, similar to <code>cd</code> command we use in terminal.</p><p>The <code>ADD</code> command lets you add the whole directory to docker image. It is similar to <code>COPY</code>, but <code>ADD</code> also supports adding from an external URL. Here I’m assuming you want to add everything in current working directory on host machine into the image, thus the <code>.</code>.</p><h3 id="Entrypoint"><a href="#Entrypoint" class="headerlink" title="Entrypoint"></a>Entrypoint</h3><p>Now that we have everything, we just need a way to start running the app when we create a container from image. </p><p>Usually for web apps, it can be as simple as:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD [&quot;python&quot;, &quot;manage.py&quot;, &quot;runserver&quot;, &quot;0.0.0.0:8000&quot;]</span><br></pre></td></tr></table></figure></p><p>But of course, there are some slight improvements that can be done. For example, we should never use the <code>python manage.py runserver</code> for production. I personally use <code>gunicorn</code> instead. </p><p>Upon starting the server, you might also want to run some other commands too, such as migrations or create admin user accounts, etc. Therefore, I recommend writing your own <code>start.sh</code> script and calling it from Dockerfile.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD [&quot;/bin/bash&quot;,&quot;start.sh&quot;]</span><br></pre></td></tr></table></figure></p><p>While my <code>start.sh</code> includes something like:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># start.sh</span><br><span class="line">python manage.py migrate</span><br><span class="line">python manage.py collectstatic --noinput</span><br><span class="line">gunicorn mysite.wsgi:application --bind 0.0.0.0:8000</span><br></pre></td></tr></table></figure></p><p>Finally, don’t forget to expose the correct port. Since <code>gunicorn</code> is running on port 8000, I have to expose this port by:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE 8000</span><br></pre></td></tr></table></figure></p><p>Don’t worry, if you don’t want your server to listen on this port, you can map it to other ports later.</p><h3 id="Building-the-Image"><a href="#Building-the-Image" class="headerlink" title="Building the Image"></a>Building the Image</h3><p>Now your Dockerfile should be something like this:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM python:3.6</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y mysql-client</span><br><span class="line"></span><br><span class="line">COPY requirements/prod.txt .</span><br><span class="line">RUN pip install prod.txt</span><br><span class="line"></span><br><span class="line">WORKDIR /app</span><br><span class="line">ADD . /app</span><br><span class="line"></span><br><span class="line">EXPOSE 8000</span><br><span class="line"></span><br><span class="line">CMD [&quot;/bin/bash&quot;,&quot;start.sh&quot;]</span><br></pre></td></tr></table></figure></p><p>You can run:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t &lt;image_name&gt;:&lt;tag&gt; .</span><br></pre></td></tr></table></figure></p><p>If it runs successfully, you will have a docker image with the name you provided.</p><h2 id="Running-Docker-Containers"><a href="#Running-Docker-Containers" class="headerlink" title="Running Docker Containers"></a>Running Docker Containers</h2><p>But how do we run a container with the image we just built?</p><p>You need to be able to answet these questions first:</p><ul><li>What port do you want your service to run on?</li><li>Is there any extra file you want to add in?</li></ul><p>For example, for me, I always want my web app on run on port 80. I have a secret <code>.env</code> file that includes credentials I need which is not included in commits, which I need to add in just before the server starts. I can run the container by the below command:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v ~/.env:/app/.env -p 80:8000 -t &lt;image_name&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure></p><p>I like to use <code>-t</code> to show the logs before ctrl+C out of it, but you can also use <code>-d</code> for detached mode. If you do not use either, you will find yourself not able to interrupt it and will have to close the terminal, which is not ideal if you’re SSHing into other machines. </p><p>There are a lot of other flags that you can use, check the <a href="https://docs.docker.com/engine/reference/commandline/run/" target="_blank" rel="noopener">documentation</a> for more info.</p><h2 id="Final-Words"><a href="#Final-Words" class="headerlink" title="Final Words"></a>Final Words</h2><p>In the next tutorial, I will talk about how to use multi-stage building to reduce image size.</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Tutorial] How to set up Auto Scaling group with Elastic Load Balancer on AWS</title>
      <link href="/2019/03/11/Tutorial-How-to-set-up-Auto-Scaling-group-with-Elastic-Load-Balancer-on-AWS/"/>
      <url>/2019/03/11/Tutorial-How-to-set-up-Auto-Scaling-group-with-Elastic-Load-Balancer-on-AWS/</url>
      
        <content type="html"><![CDATA[<p>Today we’re going to learn how to set up auto scaling group with AWS’s Elastic Load Balancer, with third party DNS, like Cloudflare.  </p><ol><li>Set up Launch Template or Launch Configuration</li></ol><p>This is the template for all the instances that will be auto started and added to the auto scaling group.<br>If you don’t need additional settings, just need to start an instance with pre-defined AMI, then Launch configuation is good enough; but if you need to do additional steps, use Launch Template instead.  </p><p>Launch Templates are under Instances tab, whereas Launch Configuation are under Auto Scalging. Both options require AMI, you can either use one of the presets, or create an image from existing EC2 instances.  </p><p>Note that the default security group only allows port 22, so if you’re using it as servers that requires 80 and/or 443 port, please remember to add them.  </p><ol start="2"><li>Set up Target Groups</li></ol><p>Load Balancers and Auto Scaling group and tied together using Target Groups.<br>Click on Target Group under Load Balancing to create a new group. </p><ol start="3"><li>Set up Auto Scaling Group</li></ol><p>Click on Auto Scaling Groups under Auto Scaling to create a new group.  </p><p>Launch configuation: Choose the launch configuation you just created<br>Group size: how many instances to start with<br>Advanced Details:</p><ul><li><p>Select “Receive traffic from one or more load balancers”</p></li><li><p>Leave “Classic Load Balancers” blank</p></li><li><p>Select the Target Group you just created in “Target Group” </p></li></ul><p>In Configure Scaling Policies, select “Use scaling policies to adjust the capacity of this group” and set up the policy like “scale between x and y, when average CPU is more than 50”  </p><p>Review and save </p><ol start="4"><li>Set up Load Balancer</li></ol><p>Select Application Load Balancer.<br>Scheme: select “internet-facing”<br>Listener: add HTTPS (port 443) if needed  </p><p>At the 4th step: configure routing, choose the same target group as the one you chose during step 3  </p><p>At the last step, you don’t have to register any targets, auto scaling group will create instance to the minimun instance number automatically.  </p><ol start="5"><li>Associate Load Balancer with DNS</li></ol><p>Find the public DNS on Load Balancer’s details tab.<br>If you’re using AWS’s Route 53 DNS, create an A (Alias) record to your desired domain name. If you’re using third party DNS, such as Cloudflare, create a CNAME record instead.  </p><ol start="6"><li>Test</li></ol><p>Your done! Link to the domain name to see if it works.  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AWS Lambda Tutorial - how to create a daily scheduled task</title>
      <link href="/2019/02/15/AWS-Lambda-Tutorial-how-to-create-a-daily-scheduled-task/"/>
      <url>/2019/02/15/AWS-Lambda-Tutorial-how-to-create-a-daily-scheduled-task/</url>
      
        <content type="html"><![CDATA[<p>In this tutorial, I’m going to talk about how to create a AWS Lambda function triggered by scheduled events.<br>For example, I want to schedule a daily job of pulling data from an API and save the data to a s3 bucket. First I need to create a lambda function, and choose “CloudWatch Events” from the trigger list.  </p><p><img src="/images/lambda1.png" alt=""></p><p>Then click on the center function itself and scroll down to see the file editor. You can choose to upload a zip file that contains your code, but for simple functions you can also just edit the code inline.  </p><p>Choose whatever runtime you want. In my case, I’m using Python 3.7.  </p><p><img src="/images/lambda2.png" alt=""></p><p>You can change the name of the function from <code>lambda_handler</code> to whatever you like, but make sure to change the name shown in “Handler” too.  </p><p>You can start writing your function too as you like. For example, I have the following code to download a gz file from url and decompress, and finally save to s3 bucket.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from io import BytesIO</span><br><span class="line">import gzip</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">from botocore.vendored import requests</span><br><span class="line">import boto3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_export(event, context):</span><br><span class="line">    </span><br><span class="line">    # get file</span><br><span class="line">    r = requests.get(fileurl)</span><br><span class="line">    fileobj = BytesIO(r.content)</span><br><span class="line">    f = gzip.GzipFile(mode=&quot;rb&quot;, fileobj=fileobj)</span><br><span class="line">    data = f.read()</span><br><span class="line">    </span><br><span class="line">    # upload to s3</span><br><span class="line">    s3 = boto3.resource(&quot;s3&quot;)</span><br><span class="line">    bucket_name = &quot;unity-analytics-library&quot;</span><br><span class="line">    today = datetime.now().strftime(&quot;%Y-%m-%d&quot;)</span><br><span class="line">    s3_path = &quot;unity-export-&#123;0&#125;.tsv&quot;.format(today)</span><br><span class="line">    s3.Bucket(bucket_name).put_object(Key=s3_path, Body=data)</span><br><span class="line">    </span><br><span class="line">    return &#123;</span><br><span class="line">        &apos;statusCode&apos;: 200,</span><br><span class="line">        &apos;s3_file&apos;: s3_path</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Just a few things to note here:  </p><ul><li><p>If you want to use <code>requests</code>, you can use <code>from botocore.vendored import requests</code> instead</p></li><li><p>AWS Lambda does not support opening and saving files since it doesn’t have a filesystem. Therefore if you are doing some fileobject manipulation like me, you can use <code>BytesIO</code> or <code>StringIO</code> instead.  </p></li><li><p>If you are using other AWS resources, for example s3 like me in the example, you don’t have to authenticate in your code since they are both AWS resources. However you do need to make sure the IAM role you’re using for this Lambda function has sufficient permission to do whatever you need. For example in my case I had to make a bucket policy to grant write permission to this particular IAM role.  </p></li></ul><p>The bucket policy would look like something like this:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;Version&quot;: &quot;2012-10-17&quot;,</span><br><span class="line">    &quot;Statement&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Sid&quot;: &quot;AllowS3Access&quot;,</span><br><span class="line">            &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">            &quot;Principal&quot;: &#123;</span><br><span class="line">                &quot;AWS&quot;: &quot;arn:aws:iam::&lt;your-iam-role&gt;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Action&quot;: &quot;s3:*&quot;,</span><br><span class="line">            &quot;Resource&quot;: [</span><br><span class="line">                &quot;arn:aws:s3:::&lt;bucket-name&gt;&quot;,</span><br><span class="line">                &quot;arn:aws:s3:::&lt;bucket-name&gt;/*&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> AWS, lambda, python, tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Using Async Task Queue Celery with Django</title>
      <link href="/2019/01/14/Using-Async-Task-Queue-Celery-with-Django/"/>
      <url>/2019/01/14/Using-Async-Task-Queue-Celery-with-Django/</url>
      
        <content type="html"><![CDATA[<p><code>pip install -U celery[django]</code>  </p><p><a href="http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html" target="_blank" rel="noopener">http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html</a></p><p>Trigger task at specific time<br><a href="https://vinta.ws/code/run-a-celery-task-at-a-specific-time.html" target="_blank" rel="noopener">https://vinta.ws/code/run-a-celery-task-at-a-specific-time.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins Tutorial pt.3 - Deploying on Servers w/ Docker</title>
      <link href="/2018/12/04/Jenkins-deploy/"/>
      <url>/2018/12/04/Jenkins-deploy/</url>
      
        <content type="html"><![CDATA[<p>Welcome back! In the previos tutorial, we’ve managed to build and push on to ECR docker registry.<br>Now we are going to deploy the code on to our servers!  </p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>We need one extra plugin this time:  </p><ul><li>SSH Agent<br>Don’t forget to setup your SSH keys in Credentials!  </li></ul><h3 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h3><p>We are creating a new pipeline, which will be triggered by the end of the build pipeline like we mentioned in pt.2.  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins Tutorial pt.2 -  Setup Docker build pipeline w/ECR</title>
      <link href="/2018/12/04/Jenkins-docker-tutorial/"/>
      <url>/2018/12/04/Jenkins-docker-tutorial/</url>
      
        <content type="html"><![CDATA[<p>Welcome to the second part of the tutorial!</p><p>We are going to build a docker image and push it to AWS’s ECR docker registry.  </p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>First, of course, you need to have Jenkins setup already. If you haven’t, see my previous post.  </p><p>Second, you need to install some plugins on Jenkins. We are using:  </p><ul><li>Git Plugin</li><li>Pipeline AWS Plugin<br>Please install them in <code>Jenkins &gt; Manage Jenkins &gt; Manage Plugins</code>. </li></ul><p>Third, set up the corresponding credentials.<br>Go to <code>Jenkins &gt; Credentials &gt; System &gt; Global &gt; Add Credentials</code>, and add a username and password for your github (or other scm) account.<br>We also need aws credentials, if you don’t have AWS account or an ECR docker registry yet, be sure to create one now.<br>You can either use the AWS Credentials type, or normal username with password, where <code>Username: AccessKeyId, Password: SecretAccessKey</code>.  </p><h2 id="Creating-Pipeline"><a href="#Creating-Pipeline" class="headerlink" title="Creating Pipeline"></a>Creating Pipeline</h2><p>Now create a new pipeline, scroll down to script part. We will be mostly using declarative pipeline instead of sripted.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    environment &#123;</span><br><span class="line">        registry = &apos;copy-your-ecr-repo-here/testproject:latest&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&quot;Checkout&quot;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                    git branch: &apos;master&apos;,</span><br><span class="line">                        credentialsId: &apos;github&apos;,</span><br><span class="line">                        url: &apos;your-github-repo.git&apos;</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&quot;Docker Build&quot;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &quot;docker build -t testproject:latest .&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&quot;ECR Login&quot;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                withAWS(credentials:&apos;aws-credential&apos;) &#123;</span><br><span class="line">                    script &#123;</span><br><span class="line">                        def login = ecrLogin()</span><br><span class="line">                        sh &quot;$&#123;login&#125;&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&quot;Docker Push&quot;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &quot;docker push $&#123;registry&#125;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        success &#123;</span><br><span class="line">            echo &apos;ending&apos;</span><br><span class="line">            build job: &apos;TestJob-CD&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Don’t worry, I will go through the whole process.</p><h3 id="Stage-1-Checkout-source-code"><a href="#Stage-1-Checkout-source-code" class="headerlink" title="Stage 1: Checkout source code"></a>Stage 1: Checkout source code</h3><p>We covered this part in the previos tutorial. Basically just checking our your source code in Jenkins.  </p><h3 id="Stage-2-Docker-Build"><a href="#Stage-2-Docker-Build" class="headerlink" title="Stage 2: Docker Build"></a>Stage 2: Docker Build</h3><p>Pretty straight forward, running a docker build command. Make sure to have a Dockerfile in your repo.  </p><h3 id="Stage-3-ECR-Login"><a href="#Stage-3-ECR-Login" class="headerlink" title="Stage 3: ECR Login"></a>Stage 3: ECR Login</h3><p>Here we are using the AWS Pipeline plugin to generate the login commands for ECR. Note that the quotation marks of <code>${login}</code> are double quotes, since we want the actual variable value, not plain text <code>${login}</code>.  </p><h3 id="Stage-4-Docker-Push"><a href="#Stage-4-Docker-Push" class="headerlink" title="Stage 4: Docker Push"></a>Stage 4: Docker Push</h3><p>Now that we have a docker image file, we can push to the docker registry, for future use.  </p><h3 id="Post-Stage-Trigger-Another-Job"><a href="#Post-Stage-Trigger-Another-Job" class="headerlink" title="Post Stage: Trigger Another Job"></a>Post Stage: Trigger Another Job</h3><p>Now the CI stage has successfully passed, we might want to trigger another job for deployment. So we can create another build job called <code>TestJob-CD</code>.<br>The <code>success</code> post stage only executes when this job is finished successfully. If there is error during execution, it won’t trigger the CD job.<br>You can find other types of post triggers <a href="https://jenkins.io/doc/book/pipeline/syntax/#post" target="_blank" rel="noopener">here</a>.  </p><p>We’ve come to the end of this tutorial! In the next post, I will talk about the CD part of Jenkins.  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins Tutorial pt.1 - Installing Jenkins on Ubuntu 18.04 and Setup</title>
      <link href="/2018/11/27/Installing-Jenkins-on-Ubuntu-18-04-and-Setup/"/>
      <url>/2018/11/27/Installing-Jenkins-on-Ubuntu-18-04-and-Setup/</url>
      
        <content type="html"><![CDATA[<h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites:"></a>Prerequisites:</h2><h3 id="Install-Java-8"><a href="#Install-Java-8" class="headerlink" title="Install Java 8."></a>Install Java 8.</h3><p>Note the version number! If you directly install the default jdk, it won’t be 8! </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install openjdk-8-jdk</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><h3 id="Install-Docker"><a href="#Install-Docker" class="headerlink" title="Install Docker"></a>Install Docker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker-ce</span><br></pre></td></tr></table></figure><p>Check if it’s running by:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status docker</span><br></pre></td></tr></table></figure></p><h2 id="Installing-Jenkins"><a href="#Installing-Jenkins" class="headerlink" title="Installing Jenkins"></a>Installing Jenkins</h2><p>Now we can finally install Jenkins.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -</span><br><span class="line">sudo sh -c &apos;echo deb http://pkg.jenkins.io/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list&apos;</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install jenkins</span><br></pre></td></tr></table></figure></p><p>Next steps we will start Jenkins and set it up.  </p><h3 id="Make-sure-jenkins-can-execute-docker-without-sudo"><a href="#Make-sure-jenkins-can-execute-docker-without-sudo" class="headerlink" title="Make sure jenkins can execute docker without sudo"></a>Make sure jenkins can execute docker without sudo</h3><p>Then we have to configure docker so that it is managed by non-root user, and we don’t have to type <code>sudo</code> everytime.<br>To do this, we create a new group and add the jenkins user.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker jenkins</span><br></pre></td></tr></table></figure></p><h2 id="Start-Jenkins"><a href="#Start-Jenkins" class="headerlink" title="Start Jenkins"></a>Start Jenkins</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start jenkins</span><br><span class="line">sudo systemctl status jenkinsi</span><br></pre></td></tr></table></figure><p>If everything is fine, you will see something like:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">● jenkins.service - LSB: Start Jenkins at boot time</span><br><span class="line">   Loaded: loaded (/etc/init.d/jenkins; generated)</span><br><span class="line">   Active: active (exited) since Tue 2018-11-27 22:28:53 UTC; 2min 23s ago</span><br><span class="line">     Docs: man:systemd-sysv-generator(8)</span><br><span class="line">    Tasks: 0 (limit: 1152)</span><br><span class="line">   CGroup: /system.slice/jenkins.service</span><br><span class="line"></span><br><span class="line">Nov 27 22:28:51  systemd[1]: Starting LSB: Start Jenkins at boot time...</span><br><span class="line">Nov 27 22:28:51  jenkins[11630]: Correct java version found</span><br><span class="line">Nov 27 22:28:52  jenkins[11630]:  * Starting Jenkins Automation Server jenkins</span><br><span class="line">Nov 27 22:28:52  su[11676]: Successful su for jenkins by root</span><br><span class="line">Nov 27 22:28:52  su[11676]: + ??? root:jenkins</span><br><span class="line">Nov 27 22:28:52  su[11676]: pam_unix(su:session): session opened for user jenkins</span><br><span class="line">Nov 27 22:28:52  su[11676]: pam_unix(su:session): session closed for user jenkins</span><br><span class="line">Nov 27 22:28:53  jenkins[11630]:    ...done.</span><br><span class="line">Nov 27 22:28:53  systemd[1]: Started LSB: Start Jenkins at boot time.</span><br></pre></td></tr></table></figure></p><p>If you are seeing errors related to wrong Java version, check the first step of this article.  </p><p>Now you can go to <code>http://domain or ip:8080</code> to see your Jenkins app.<br>You will need to copy and paste the password to prove that you are the owner of this server.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /var/lib/jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure></p><p>Now you will be able to log in and create admin users and stuff.<br>Next I will build a Django + docker project as an example.</p><h2 id="Creating-our-First-Pipeline"><a href="#Creating-our-First-Pipeline" class="headerlink" title="Creating our First Pipeline"></a>Creating our First Pipeline</h2><p>Now assume I have a project on github. I want to create a pipeline to checkout the source code and do something with it.  </p><p>First create a new job. In the select panel, select <code>pipeline</code>.<br>For now, we will head directly to the Pipeline section. In the script part, enter following:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    environment &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&quot;Hello&quot;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &apos;echo &quot;Hello World&quot;&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&quot;Checkout&quot;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                    git branch: &apos;master&apos;,</span><br><span class="line">                        credentialsId: &apos;github&apos;,</span><br><span class="line">                        url: &apos;https://github.com/user123/example.git&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Since this is our first test, we will just do something really simple.  </p><p>We are going to test if the pipeline script works, so I’m just gonna put in <code>echo &quot;Hello World&quot;</code> in shell script. If everything works well, we will see this in console logs.  </p><p>Next is checking out source code.<br>In this case, I am using github, so I have to input my credentials for github in <code>jenkins &gt; Credentials &gt; Global &gt; Add Credentials</code>.<br>Choose the one with username and password, input your github credentials, and give it ID <code>github</code>.<br>Remember, if you are using the username and password authentication, you have to use the HTTPS url for<br> github instead of the SSH one. The <code>credentialsId</code> in script is the ID that we have for credentials.  </p><p>Now save and go back to the item page, and click “Build Now”. If the grid box turns green, it mean your pipeline has successfully built and run.  </p><p>Congratulations! You’ve built your first Jenkins pipeline! Now move on to the 2nd part of this tutorial.  </p>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins, devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Useful Commands when Fixing EBS in EC2</title>
      <link href="/2018/10/30/How-to-detach-an-EBS-volume-and-re-attach-to-another-machine/"/>
      <url>/2018/10/30/How-to-detach-an-EBS-volume-and-re-attach-to-another-machine/</url>
      
        <content type="html"><![CDATA[<p>When there is problem with your EBS Volume, you can try detach the root device, attaching it to another device and access it to fix it.  </p><p>To attach: <code>mount /dev/xvdf /vol</code><br>To detach: <code>umount /vol</code><br>where <code>/vol</code> is the mount point  </p><p>When you want to re-attach a root device, you have to set the device name to<br><code>/sda1</code> instead of the default name <code>/sdf</code></p><p>If error when trying to mount EBS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mount: wrong fs type, bad option, bad superblock on /dev/xvdf,</span><br><span class="line">       missing codepage or helper program, or other error</span><br><span class="line">       In some cases useful info is found in syslog - try</span><br><span class="line">       dmesg | tail  or so</span><br></pre></td></tr></table></figure></p><p>try:<br><code>sudo mount /dev/xvdf /vol -t ext4</code>  or <code>sudo mount /dev/xvdf1 /vol -t ext4</code>  </p><p>Filesystem check: <code>fsck</code>  </p><p>If any settings wrong, it’s in <code>/etc/fstab</code>  </p>]]></content>
      
      
      
        <tags>
            
            <tag> AWS, EC2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploy Django on AWS EC2</title>
      <link href="/2018/08/22/Deploy-Django-on-AWS-EC2/"/>
      <url>/2018/08/22/Deploy-Django-on-AWS-EC2/</url>
      
        <content type="html"><![CDATA[<h2 id="set-up-instance"><a href="#set-up-instance" class="headerlink" title="set up instance"></a>set up instance</h2><p>First, you need to have an AWS IAM account, and set up and instance.<br>Next, you can SSH into the instance with <code>ssh -i key.pem end_point</code><br>Once you are inside the instance, you have to set up your environment.</p><h2 id="set-up-dev-environment"><a href="#set-up-dev-environment" class="headerlink" title="set up dev environment"></a>set up dev environment</h2><p>Run <code>sudo apt-get install python-pip</code> to install pip.<br>Run <code>pip install -r requirements.txt</code> to install your environment. If you have database migrations, run them too.<br>Then change the <code>ALLOWED_HOSTS</code> inside django <code>settings.py</code> to the IP and domain name of server<br>Don’t forget to open the access of security group of 8000 for testing.<br>To test if it’s working, run <code>python manage.py runserver</code>  to test if it works.</p><h2 id="set-up-nginx"><a href="#set-up-nginx" class="headerlink" title="set up nginx"></a>set up nginx</h2><p><code>sudo apt-get install nginx</code><br>Open the browser to see nginx default page.  </p><h2 id="Set-up-gunicorn"><a href="#Set-up-gunicorn" class="headerlink" title="Set up gunicorn"></a>Set up gunicorn</h2><p><code>pip install gunicorn</code><br>write gunicorn into a systemctl<br><code>sudo systemctl restart gunicorn</code></p><h2 id="set-up-MySQL"><a href="#set-up-MySQL" class="headerlink" title="set up MySQL"></a>set up MySQL</h2><p><code>sudo apt-get install libmysqlclient-dev</code><br>set up DB credentials in <code>settings.py</code>  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[LeetCode] Minimum Height Tree</title>
      <link href="/2018/07/25/LeetCode-Minimum-Height-Tree/"/>
      <url>/2018/07/25/LeetCode-Minimum-Height-Tree/</url>
      
        <content type="html"><![CDATA[<p>Topological Sort to find root</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findMinHeightTrees</span><span class="params">(self, n, edges)</span>:</span></span><br><span class="line">    <span class="comment"># Wirte your code here</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>: <span class="keyword">return</span> [<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    graph = [[] <span class="keyword">for</span> x <span class="keyword">in</span> range(n)]</span><br><span class="line">    degree = [<span class="number">0</span>] * n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> edges:</span><br><span class="line">        graph[e[<span class="number">0</span>]].append(e[<span class="number">1</span>])</span><br><span class="line">        graph[e[<span class="number">1</span>]].append(e[<span class="number">0</span>])</span><br><span class="line">        degree[e[<span class="number">0</span>]] += <span class="number">1</span></span><br><span class="line">        degree[e[<span class="number">1</span>]] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># from leaf node</span></span><br><span class="line">    leaves = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(n) <span class="keyword">if</span> degree[i] == <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    nodes = n</span><br><span class="line">    <span class="keyword">while</span> nodes &gt; <span class="number">2</span>:</span><br><span class="line">        newleaves = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> leaves:</span><br><span class="line">            degree[i] = <span class="number">0</span></span><br><span class="line">            nodes -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> graph[i]:</span><br><span class="line">                degree[j] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> degree[j] == <span class="number">1</span>:</span><br><span class="line">                    newleaves.append(j)</span><br><span class="line">        leaves = newleaves</span><br><span class="line">    <span class="keyword">return</span> leaves</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fenwick Tree / Binary Indexed Tree</title>
      <link href="/2018/07/25/Fenwick-Tree-Binary-Indexed-Tree/"/>
      <url>/2018/07/25/Fenwick-Tree-Binary-Indexed-Tree/</url>
      
        <content type="html"><![CDATA[<p>Fenwick Tree, or Binary Indexed Tree, is a data structure for range queries.<br>It is similar to Segment Tree, however</p><p>A simple implementation for constructing Fenwick Tree and query ranges is as following.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumArray</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.nums = nums</span><br><span class="line">        self.nums.insert(<span class="number">0</span>, <span class="number">0</span>) <span class="comment"># one-based</span></span><br><span class="line">        self.l = len(nums)</span><br><span class="line">        self.tree = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(self.l)]</span><br><span class="line">        <span class="comment"># construct tree</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, self.l + <span class="number">1</span>):</span><br><span class="line">            start = i</span><br><span class="line">            <span class="keyword">while</span> start &lt; len(self.tree):</span><br><span class="line">                self.tree[start] += self.nums[i]</span><br><span class="line">                start += self.lowbit(start)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowbit</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x &amp; -x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, i, val)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type i: int</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: void</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        start = i + <span class="number">1</span></span><br><span class="line">        diff = val - self.nums[start]</span><br><span class="line">        <span class="keyword">while</span> start &lt; len(self.tree):</span><br><span class="line">            self.tree[start] += diff</span><br><span class="line">            start += self.lowbit(start)</span><br><span class="line">        self.nums[i + <span class="number">1</span>] = val</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumRange</span><span class="params">(self, i, j)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type i: int</span></span><br><span class="line"><span class="string">        :type j: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># inclusive [, ]</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">sum_start</span><span class="params">(n)</span>:</span></span><br><span class="line">            ans = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> n != <span class="number">0</span>:</span><br><span class="line">                ans += self.tree[n]</span><br><span class="line">                n -= self.lowbit(n)</span><br><span class="line">            <span class="keyword">return</span> ans</span><br><span class="line">        <span class="comment"># make it one based</span></span><br><span class="line">        <span class="keyword">return</span> sum_start(j + <span class="number">1</span>) - sum_start(i)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> datastructure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LeetCode] Graph Valid Tree</title>
      <link href="/2018/07/23/LeetCode-Graph-Valid-Tree/"/>
      <url>/2018/07/23/LeetCode-Graph-Valid-Tree/</url>
      
        <content type="html"><![CDATA[<p>By definition, we know that “tree” is a acyclic, connected graph.<br>Therefore, in this problem, we only need to check if it’s acyclic and connected.  </p><p>The basic idea is, if there’s a node that we’ve visited and it’s not the parent of node, then there is cycle.  We can also use Union Find to detect cycles in undirected graphs.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validTree</span><span class="params">(self, n, edges)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :type n: int</span></span><br><span class="line"><span class="string">    :type edges: List[List[int]]</span></span><br><span class="line"><span class="string">    :rtype: bool</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># check cycle and connected</span></span><br><span class="line">    <span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">    graph = defaultdict(list)</span><br><span class="line">    <span class="keyword">for</span> a, b <span class="keyword">in</span> edges:</span><br><span class="line">        graph[a].append(b)</span><br><span class="line">        graph[b].append(a)</span><br><span class="line">    visit = set()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DFS</span><span class="params">(node, parent)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">in</span> visit: <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        visit.add(node)</span><br><span class="line">        <span class="keyword">for</span> neighbor <span class="keyword">in</span> graph[node]:</span><br><span class="line">            <span class="keyword">if</span> neighbor <span class="keyword">not</span> <span class="keyword">in</span> visit:</span><br><span class="line">                child = DFS(neighbor, node)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> child: <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> neighbor != parent:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    cycle = DFS(<span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> cycle <span class="keyword">and</span> len(visit) == n</span><br></pre></td></tr></table></figure><p>There is also another way to check cycles – using Union Find.<br>The idea is, for each edge (u,v), u and v cannot be in the same set.<br>This is useful if the given input is edges instead of nodes because you don’t need to construct the nodes again.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validTree</span><span class="params">(self, n, edges)</span>:</span></span><br><span class="line">    <span class="comment"># write your code here</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>: <span class="keyword">return</span> <span class="keyword">True</span> </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> graph[node] == node: <span class="keyword">return</span> node</span><br><span class="line">        root = find(graph[node])</span><br><span class="line">        graph[node] = root <span class="comment"># path compression</span></span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(root, node)</span>:</span></span><br><span class="line">        graph[graph[node]] = graph[root]</span><br><span class="line">    </span><br><span class="line">    graph = list(range(n))</span><br><span class="line">    visit = set()</span><br><span class="line">    <span class="keyword">for</span> a, b <span class="keyword">in</span> edges:</span><br><span class="line">        visit.add(a)</span><br><span class="line">        visit.add(b)</span><br><span class="line">        <span class="keyword">if</span> find(a) == find(b):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span> </span><br><span class="line">        union(a, b)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> len(visit) == n</span><br></pre></td></tr></table></figure><p>Reference: <a href="https://www.geeksforgeeks.org/union-find/" target="_blank" rel="noopener">geeksforgeeks</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AVL Tree and Red-Black Tree</title>
      <link href="/2018/07/17/AVL-Tree-and-Red-Black-Tree/"/>
      <url>/2018/07/17/AVL-Tree-and-Red-Black-Tree/</url>
      
        <content type="html"><![CDATA[<p>We know that when inserting or searching nodes, the time complexity is O(h), where h denotes the height of tree. Therefore, if the tree is very skewed to one side, it may waste a lot of time.<br>If we keep the tree sort of balanced when we know we have to search or insert often, it’s more efficient.<br>Both of them are balanced binary trees. </p><h2 id="AVL-Tree"><a href="#AVL-Tree" class="headerlink" title="AVL Tree"></a>AVL Tree</h2>]]></content>
      
      
      
        <tags>
            
            <tag> datastructure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tree Key Point Review</title>
      <link href="/2018/07/16/Tree-Key-Point-Review/"/>
      <url>/2018/07/16/Tree-Key-Point-Review/</url>
      
        <content type="html"><![CDATA[<p>Tree is an important data structure.<br>There are multiple ways to implement, today we are going to talk about the most common 2 ways.  </p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>Hash map implementation is useful when given edges instead of a tree structure.<br>For example, if given edges: <code>[[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]</code><br>We can convert edges into a hash map like this:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    0: [3],</span><br><span class="line">    1: [3],</span><br><span class="line">    2: [3],</span><br><span class="line">    3: [0, 1, 2, 4],</span><br><span class="line">    4: [3, 5],</span><br><span class="line">    5: [4]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Simply iterate through the edges and create this table:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">graph = defaultdict(list)</span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> edges:</span><br><span class="line">    graph[e[<span class="number">0</span>]].append(e[<span class="number">1</span>])</span><br><span class="line">    graph[e[<span class="number">1</span>]].append(e[<span class="number">0</span>])</span><br></pre></td></tr></table></figure></p><h3 id="TreeNode-Class"><a href="#TreeNode-Class" class="headerlink" title="TreeNode Class"></a>TreeNode Class</h3><p>While the previos one is useful for all kinds of graph, this implemention is only useful for binary (or n-ary) trees, because the children number has to be fixed.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, val, l=None, r=None)</span>:</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.left, self.right = l, r</span><br></pre></td></tr></table></figure><h2 id="Operations-and-Time-Complexity"><a href="#Operations-and-Time-Complexity" class="headerlink" title="Operations and Time Complexity"></a>Operations and Time Complexity</h2><p>To search or insert a node, the time complexity is O(h), where h is the height of the tree. The height is also at least O(logn).<br>Because this is not very efficien, we later introduce AVL Tree and Red-Black Tree.<br>To delete a node is less straightforward, because there are multiple cases.<br>If the node is a leaf, we simple delete it; if it has one child, we bypass the child. However, if there are 2 children, we replace the value with the largest value in its left subtree, and then delete that node.<br>This is to prevent the tree from breaking into 2 subtrees without access to one of them.  </p><h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><p>DFS, depth first search, is useful when finding paths or connected compartment.<br>There are 2 different kinds of implementation: recursive and iterative.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This code uses the 2nd implementation of tree above </span></span><br><span class="line"><span class="comment"># and assume that it's a binary tree</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DFS</span><span class="params">(node)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node.left <span class="keyword">and</span> <span class="keyword">not</span> node.right:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    DFS(node.left)</span><br><span class="line">    DFS(node.right)</span><br></pre></td></tr></table></figure><p>The non-recursive, or iterative way utilize a stack.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This code uses the 1st implementation of tree above</span></span><br><span class="line">stack = [root]</span><br><span class="line">visit = []</span><br><span class="line"><span class="keyword">while</span> len(stack) &gt; <span class="number">0</span>:</span><br><span class="line">    node = stack.pop()</span><br><span class="line">    visit.append(node)</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> graph[node]:</span><br><span class="line">        <span class="keyword">if</span> n <span class="keyword">not</span> <span class="keyword">in</span> visit:</span><br><span class="line">            stack.append(n)</span><br></pre></td></tr></table></figure></p><p>Inorder, preorder and postorder are 3 ways of DFS.  </p><ul><li>PreOrder traversal - visit the parent first and then left and right children;</li><li>InOrder traversal - visit the left child, then the parent and the right child;</li><li>PostOrder traversal - visit left child, then the right child and then the parent;</li></ul><p>There are multiple ways, I’m only going to write some.  </p><p><strong>Preorder</strong> , recursion with side effects:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preorder</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> root == <span class="keyword">None</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    visit.append(root.val)</span><br><span class="line">    preorder(root.left)</span><br><span class="line">    preorder(root.right)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p><strong>Inorder</strong>, recursion without side effects:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inorder</span><span class="params">(root, visit)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="keyword">None</span>: </span><br><span class="line">            <span class="keyword">return</span> visit</span><br><span class="line">        <span class="keyword">return</span> inorder(root.left, visit) + [root.val] + inorder(root.right, visit)</span><br></pre></td></tr></table></figure></p><p>Iterative<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :type root: TreeNode</span></span><br><span class="line"><span class="string">    :rtype: List[int]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    res, stack = [], []</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">while</span> root:</span><br><span class="line">            stack.append(root)</span><br><span class="line">            root = root.left</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> stack:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        node = stack.pop()</span><br><span class="line">        res.append(node.val)</span><br><span class="line">        root = node.right</span><br></pre></td></tr></table></figure></p><p><strong>Binary Tree Postorder Iterative</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span><span class="params">(self, root)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :type root: TreeNode</span></span><br><span class="line"><span class="string">    :rtype: List[int]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    res = []</span><br><span class="line">    stack = [root]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">while</span> len(stack) &gt; <span class="number">0</span>:</span><br><span class="line">        node = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">            stack.append(node.left)</span><br><span class="line">        <span class="keyword">if</span> node.right:</span><br><span class="line">            stack.append(node.right)</span><br><span class="line">        res.append(node.val)</span><br><span class="line">    <span class="keyword">return</span> res[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><p>BFS, or Breadth First Search, is useful when finding <strong>shortest</strong> path.<br>The biggest difference is that instead of stack in DFS, BFS uses a queue.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This code uses the 1st implementation of tree above</span></span><br><span class="line">queue = [root]</span><br><span class="line">visit = []</span><br><span class="line"><span class="keyword">while</span> len(queue) &gt; <span class="number">0</span>:</span><br><span class="line">    node = queue.pop(<span class="number">0</span>)</span><br><span class="line">    visit.append(node)</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> graph[node]:</span><br><span class="line">        <span class="keyword">if</span> n <span class="keyword">not</span> <span class="keyword">in</span> visit:</span><br><span class="line">            queue.append(n)</span><br></pre></td></tr></table></figure><p>We can easily modify the code to find depth and path to a specific node.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">q = [(node, <span class="number">1</span>, [node])]</span><br><span class="line">visit = []</span><br><span class="line">depth = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> len(q) &gt; <span class="number">0</span>:</span><br><span class="line">    node, d, path = q.pop(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> node == goal: <span class="keyword">break</span></span><br><span class="line">    visit.append(node)</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> graph[node]:</span><br><span class="line">        <span class="keyword">if</span> n <span class="keyword">not</span> <span class="keyword">in</span> visit:</span><br><span class="line">            q.append((n, d + <span class="number">1</span>, path + [n]))</span><br></pre></td></tr></table></figure><h2 id="Balanced"><a href="#Balanced" class="headerlink" title="Balanced"></a>Balanced</h2><p>Balance meaning the height of every left and right subtree cannot differ more than 1.<br>We can check it recursively.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isBalanced</span><span class="params">(self, root)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :type root: TreeNode</span></span><br><span class="line"><span class="string">    :rtype: bool</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_height</span><span class="params">(root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left_height = check_height(root.left)</span><br><span class="line">        right_height = check_height(root.right)</span><br><span class="line">        <span class="keyword">if</span> left_height == <span class="number">-1</span> <span class="keyword">or</span> right_height == <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="keyword">if</span> abs(left_height - right_height) &gt; <span class="number">1</span>: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="keyword">return</span> max(left_height, right_height) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> check_height(root) != <span class="number">-1</span></span><br></pre></td></tr></table></figure></p><h2 id="Trie-Prefix-Tree"><a href="#Trie-Prefix-Tree" class="headerlink" title="Trie (Prefix Tree)"></a>Trie (Prefix Tree)</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[LeetCode] Binary Tree Longest Consecutive Sequence</title>
      <link href="/2018/07/16/LeetCode-Binary-Tree-Longest-Consecutive/"/>
      <url>/2018/07/16/LeetCode-Binary-Tree-Longest-Consecutive/</url>
      
        <content type="html"><![CDATA[<p>This problem is the first of its series.<br>The initial thought might be from each node, check the consecutive sequence starting from itself.  However, this will result in TLE because it’s O(n) time complexity.<br>How can we improve? We don’t actually need to recalculate for each node.<br>We only need to keep track of the current length of this consecutive sequence. When we see a new node, if it’s +1 to previous value, we add one to length; otherwise, we reset length to 1.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Definition of TreeNode:</span></span><br><span class="line"><span class="string">class TreeNode:</span></span><br><span class="line"><span class="string">    def __init__(self, val):</span></span><br><span class="line"><span class="string">        self.val = val</span></span><br><span class="line"><span class="string">        self.left, self.right = None, None</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @param root: the root of binary tree</span></span><br><span class="line"><span class="string">    @return: the length of the longest consecutive sequence path</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestConsecutive</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="comment"># write your code here</span></span><br><span class="line">        self.ans = <span class="number">0</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">DFS</span><span class="params">(node, depth, parent)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                self.ans = max(self.ans, depth)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> parent:</span><br><span class="line">                <span class="keyword">if</span> node.val == parent.val + <span class="number">1</span>:</span><br><span class="line">                    depth += <span class="number">1</span></span><br><span class="line">                    self.ans = max(self.ans, depth)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.ans = max(self.ans, depth)</span><br><span class="line">                    depth = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            DFS(node.left, depth, node)</span><br><span class="line">            DFS(node.right, depth, node)</span><br><span class="line"></span><br><span class="line">        DFS(root, <span class="number">1</span>, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">return</span> self.ans</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LeetCode] Repeated DNA Sequences</title>
      <link href="/2018/07/15/LeetCode-Repeated-DNA-Sequences/"/>
      <url>/2018/07/15/LeetCode-Repeated-DNA-Sequences/</url>
      
        <content type="html"><![CDATA[<p>An intuitive solution would be traverse through the whole string,<br>create HashMap using key of every 10-letter-long substring.<br>But comparing 2 strings is slow, there are better ways.  </p><p>Consider ACGT, there are only 4, therefore we can use 2 bit binary numbers to represent them.<br>That is to say: 00 for A, 01 for C, 10 for G, 11 for T.<br>For <code>ACGT</code>, it will be <code>00011011</code>, for example.<br>Using this method, we are able to store the 10-letter-long substring using only 1 integer.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @param s: a string</span></span><br><span class="line"><span class="string">    @return: return List[str]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findRepeatedDnaSequences</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">        table = &#123;<span class="string">'A'</span>:<span class="number">0</span>,<span class="string">'C'</span>:<span class="number">1</span>,<span class="string">'G'</span>:<span class="number">2</span>,<span class="string">'T'</span>:<span class="number">3</span>&#125;</span><br><span class="line">        d = defaultdict(int)</span><br><span class="line">        m = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)<span class="number">-9</span>):</span><br><span class="line">            pattern = s[i:i+<span class="number">10</span>]</span><br><span class="line">            key = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> pattern:</span><br><span class="line">                key += table[p]</span><br><span class="line">                key &lt;&lt;= <span class="number">2</span></span><br><span class="line">            d[key] += <span class="number">1</span></span><br><span class="line">            m[key] = pattern</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> d:</span><br><span class="line">            <span class="keyword">if</span> d[e] &gt; <span class="number">1</span>:</span><br><span class="line">                ans.append(m[e])</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LeetCode] Bitwise Manipulation</title>
      <link href="/2018/07/14/LeetCode-Bitwise-Manipulation/"/>
      <url>/2018/07/14/LeetCode-Bitwise-Manipulation/</url>
      
        <content type="html"><![CDATA[<h2 id="Most-Significant-Bit"><a href="#Most-Significant-Bit" class="headerlink" title="Most Significant Bit"></a>Most Significant Bit</h2><h2 id="Least-Significant-Bit"><a href="#Least-Significant-Bit" class="headerlink" title="Least Significant Bit"></a>Least Significant Bit</h2><h3 id="How-to-clear-LSB"><a href="#How-to-clear-LSB" class="headerlink" title="How to clear LSB"></a>How to clear LSB</h3><p>n &amp; (n - 1)</p><h2 id="Gray-Code"><a href="#Gray-Code" class="headerlink" title="Gray Code"></a>Gray Code</h2><p>Gray Code is a way to encode binary numbers so that between each number,<br>there is only 1 bit difference.<br>For example, we can encode 0~3 by 00 -&gt; 01 -&gt; 11 -&gt; 10.<br>This is useful for switches and validating messages.  </p><p>There are multiple ways to create gray code, but the easiest way is using mirror method.  </p><p>We start from the most simple gray code: only 1 bit.  </p><p>##<br>0xaa = 10101010</p><h2 id="Bitwise-Related-LeetCode-Problems"><a href="#Bitwise-Related-LeetCode-Problems" class="headerlink" title="Bitwise Related LeetCode Problems"></a>Bitwise Related LeetCode Problems</h2><p><a href="">Single Number</a><br><a href="">Single Number II</a><br><a href="">Power of Two</a><br><a href="">Power of Three</a><br><a href="">Power of Four</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[LeetCode] Maximal Rectangle</title>
      <link href="/2018/07/08/LeetCode-Maximal-Rectangle/"/>
      <url>/2018/07/08/LeetCode-Maximal-Rectangle/</url>
      
        <content type="html"><![CDATA[<p>At first, I thought this one will be similar to Maximal Square in 2D Array.<br>But soon I realize this one is harder than finding squares.<br>The solution is not based on finding squares at all – instead, it’s separating the 2D array into multiple histograms.<br>If we cover the lower half of the matrix, we can easily see that the answer becomes<br>finding the maximal rectangle in histograms.  </p><p>The way to do that is already described in my other article<br>Therefore we just need to separate them into histograms.  </p><pre><code class="python"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>    <span class="function"><span class="keyword">def</span> <span class="title">maximalRectangle</span><span class="params">(self, matrix)</span>:</span>        <span class="string">"""</span><span class="string">        :type matrix: List[List[str]]</span><span class="string">        :rtype: int</span><span class="string">        """</span>        <span class="function"><span class="keyword">def</span> <span class="title">largestRectangleArea</span><span class="params">(heights)</span>:</span>            loc = []            stack = []            ans = <span class="number">0</span>            <span class="keyword">for</span> i, e <span class="keyword">in</span> enumerate(heights):                <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">or</span> e &gt;= stack[<span class="number">-1</span>]:                    loc.append(i)                    stack.append(e)                <span class="keyword">else</span>:                    <span class="comment"># pop and calculate</span>                    <span class="keyword">while</span> len(stack) &gt; <span class="number">0</span> <span class="keyword">and</span> e &lt; stack[<span class="number">-1</span>]:                        h = stack.pop()                        start = loc.pop()                        size = h * (i - start)                        <span class="keyword">if</span> size &gt; ans: ans = size                    loc.append(start)                    stack.append(e)            <span class="keyword">while</span> len(stack) &gt; <span class="number">0</span>:                h = stack.pop()                start = loc.pop()                size = h * (len(heights) - start)                <span class="keyword">if</span> size &gt; ans: ans = size            <span class="keyword">return</span> ans        m = len(matrix)        n = len(matrix[<span class="number">0</span>])        hist = [[<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(n)] <span class="keyword">for</span> i <span class="keyword">in</span> range(m)]        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):                <span class="keyword">if</span> matrix[i][j] == <span class="string">'1'</span>:                    <span class="keyword">if</span> i == <span class="number">0</span>:                        hist[i][j] = <span class="number">1</span>                    <span class="keyword">else</span>:                        hist[i][j] = hist[i<span class="number">-1</span>][j] + <span class="number">1</span>        res = <span class="number">0</span>        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):            histogram = hist[i]            res = max(res, largestRectangleArea(histogram))        <span class="keyword">return</span> res</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LeetCode] Largest Rectangle in Histogram</title>
      <link href="/2018/07/08/LeetCode-Largest-Rectangle-in-Histogram/"/>
      <url>/2018/07/08/LeetCode-Largest-Rectangle-in-Histogram/</url>
      
        <content type="html"><![CDATA[<p>This problem is similar to Trapped Water.<br>Initial thought will be for each bar, try to find the bounds of right and left<br>However this takes O(n^2) way too long<br>Instead of trying to find each time, we can use a stack to memorize the history height and position  </p><p>We only calculate the size when we see a bar the lower than previous ones<br>Because we know that it’s impossible for the previous height to sustain<br>However there’s one thing to remember:<br>When we pop the previous elements, keep the position in stack<br>Because although the height cannot be sustained, the future rectangle can still count it.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">largestRectangleArea</span><span class="params">(self, heights)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type heights: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        loc = []</span><br><span class="line">        stack = []</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, e <span class="keyword">in</span> enumerate(heights):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">or</span> e &gt;= stack[<span class="number">-1</span>]:</span><br><span class="line">                loc.append(i)</span><br><span class="line">                stack.append(e)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># pop and calculate</span></span><br><span class="line">                <span class="keyword">while</span> len(stack) &gt; <span class="number">0</span> <span class="keyword">and</span> e &lt; stack[<span class="number">-1</span>]:</span><br><span class="line">                    h = stack.pop()</span><br><span class="line">                    start = loc.pop()</span><br><span class="line">                    size = h * (i - start)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> size &gt; ans: ans = size</span><br><span class="line">                loc.append(start)</span><br><span class="line">                stack.append(e)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> len(stack) &gt; <span class="number">0</span>:</span><br><span class="line">            h = stack.pop()</span><br><span class="line">            start = loc.pop()</span><br><span class="line">            size = h * (len(heights) - start)</span><br><span class="line">            <span class="keyword">if</span> size &gt; ans: ans = size</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Set Up Ionic/Cordova Environment</title>
      <link href="/2018/06/28/How-to-Set-Up-Ionic-Cordova-Environment/"/>
      <url>/2018/06/28/How-to-Set-Up-Ionic-Cordova-Environment/</url>
      
        <content type="html"><![CDATA[<p>This tutorial is for Linux, not Mac!  </p><p>First, download Android Studio<br>and extract the folder in <code>/usr/bin</code>  </p><p>execute <code>/bin/studio.sh</code><br>Set ANDROID_HOME  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ANDROID_HOME=/home/kelly/Android/Sdk</span><br><span class="line">export PATH=&quot;$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$PATH&quot;</span><br></pre></td></tr></table></figure><p>Second, install Java 8<br><a href="https://tecadmin.net/install-oracle-java-8-ubuntu-via-ppa/" target="_blank" rel="noopener">https://tecadmin.net/install-oracle-java-8-ubuntu-via-ppa/</a><br>Set JAVA_HOME and JRE_HOME<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/usr/lib/jvm/java-8-oracle</span><br><span class="line">JRE_HOME=/usr/lib/jvm/java-8-oracle/jre</span><br></pre></td></tr></table></figure></p><p>Third, install Gradle<br><code>export GRADLE_HOME=/usr/bin/android-studio/gradle/gradle-3.2</code><br>add <code>GRADLE_HOME/bin</code> into PATH<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;$GRADLE_HOME/bin:/usr/bin/android-studio/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$PATH&quot;</span><br></pre></td></tr></table></figure></p><p>Now run <code>ionic cordova build android</code><br>if you see license problem, try:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir &quot;$ANDROID_HOME/licenses&quot;</span><br><span class="line">echo -e &quot;\n8933bad161af4178b1185d1a37fbf41ea5269c55&quot; &gt; &quot;$ANDROID_HOME/licenses/android-sdk-license&quot;</span><br></pre></td></tr></table></figure></p><p>Finally, set up Virtual Device using Android Studio<br><a href="https://developer.android.com/studio/run/managing-avds.html" target="_blank" rel="noopener">https://developer.android.com/studio/run/managing-avds.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> tutorial,linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LeetCode] My Calendar I</title>
      <link href="/2018/06/27/LeetCode-My-Calendar-I/"/>
      <url>/2018/06/27/LeetCode-My-Calendar-I/</url>
      
        <content type="html"><![CDATA[<p>Very similar to insert intervals, too!  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCalendar</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.schedule = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">book</span><span class="params">(self, start, end)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type start: int</span></span><br><span class="line"><span class="string">        :type end: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        find = <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.schedule)):</span><br><span class="line">            time = self.schedule[i]</span><br><span class="line">            <span class="keyword">if</span> start &lt; time[<span class="number">1</span>] <span class="keyword">and</span> end &gt; time[<span class="number">0</span>]:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">if</span> time[<span class="number">0</span>] &gt; start:</span><br><span class="line">                self.schedule.insert(i, (start, end))</span><br><span class="line">                find = <span class="keyword">True</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> find:</span><br><span class="line">            self.schedule.append((start, end))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your MyCalendar object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MyCalendar()</span></span><br><span class="line"><span class="comment"># param_1 = obj.book(start,end)</span></span><br></pre></td></tr></table></figure><p>If we want to improve time complexity, we can use binary search and a tree  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, start, end)</span>:</span></span><br><span class="line">        self.start = start</span><br><span class="line">        self.end = end</span><br><span class="line">        self.left = self.right = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.root = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_node</span><span class="params">(self, node, root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            self.root = node</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node.start &gt;= root.end:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root.right:</span><br><span class="line">                root.right = node</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">return</span> self.insert_node(node, root.right)</span><br><span class="line">        <span class="keyword">elif</span> node.end &lt;= root.start:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root.left:</span><br><span class="line">                root.left = node</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">return</span> self.insert_node(node, root.left)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCalendar</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.tree = Tree()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">book</span><span class="params">(self, start, end)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type start: int</span></span><br><span class="line"><span class="string">        :type end: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        node = Node(start, end)</span><br><span class="line">        <span class="keyword">return</span> self.tree.insert_node(node, self.tree.root)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LeetCode] Merge Intervals</title>
      <link href="/2018/06/27/LeetCode-Merge-Intervals/"/>
      <url>/2018/06/27/LeetCode-Merge-Intervals/</url>
      
        <content type="html"><![CDATA[<p>Very similar to insert intervals.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Definition of Interval.</span></span><br><span class="line"><span class="string">class Interval(object):</span></span><br><span class="line"><span class="string">    def __init__(self, start, end):</span></span><br><span class="line"><span class="string">        self.start = start</span></span><br><span class="line"><span class="string">        self.end = end</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @param intervals: interval list.</span></span><br><span class="line"><span class="string">    @return: A new interval list.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, intervals)</span>:</span></span><br><span class="line">        <span class="comment"># write your code here</span></span><br><span class="line">        <span class="comment"># n log(n)</span></span><br><span class="line">        intervals = sorted(intervals, key=<span class="keyword">lambda</span> x: x.start)</span><br><span class="line">        <span class="comment"># + n</span></span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(intervals):</span><br><span class="line">            <span class="keyword">if</span> intervals[i].start &lt; intervals[i<span class="number">-1</span>].end <span class="keyword">and</span> intervals[i].end &lt; intervals[i<span class="number">-1</span>].end:</span><br><span class="line">                <span class="keyword">del</span> intervals[i]</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> intervals[i].start &lt;= intervals[i<span class="number">-1</span>].end <span class="keyword">and</span> intervals[i].end &gt;= intervals[i<span class="number">-1</span>].end:</span><br><span class="line">                intervals[i<span class="number">-1</span>].end = intervals[i].end</span><br><span class="line">                <span class="keyword">del</span> intervals[i]</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> intervals</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LeetCode] Insert Intervals</title>
      <link href="/2018/06/27/LeetCode-Insert-Intervals/"/>
      <url>/2018/06/27/LeetCode-Insert-Intervals/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Definition of Interval.</span></span><br><span class="line"><span class="string">class Interval(object):</span></span><br><span class="line"><span class="string">    def __init__(self, start, end):</span></span><br><span class="line"><span class="string">        self.start = start</span></span><br><span class="line"><span class="string">        self.end = end</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @param intervals: Sorted interval list.</span></span><br><span class="line"><span class="string">    @param newInterval: new interval.</span></span><br><span class="line"><span class="string">    @return: A new interval list.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, intervals, newInterval)</span>:</span></span><br><span class="line">        <span class="comment"># write your code here</span></span><br><span class="line">        start = newInterval.start</span><br><span class="line">        end = newInterval.end</span><br><span class="line">        <span class="comment"># find start</span></span><br><span class="line">        pos = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(intervals)):</span><br><span class="line">            <span class="keyword">if</span> intervals[i].end == start:</span><br><span class="line">                pos = i + <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> intervals[i].start &gt;= start:</span><br><span class="line">                pos = i</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> pos == <span class="number">-1</span>:</span><br><span class="line">            <span class="comment"># append</span></span><br><span class="line">            intervals.append(newInterval)</span><br><span class="line">        intervals.insert(pos, newInterval)</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(intervals):</span><br><span class="line">            <span class="keyword">if</span> intervals[i].start &lt; intervals[i<span class="number">-1</span>].end <span class="keyword">and</span> intervals[i].end &lt; intervals[i<span class="number">-1</span>].end:</span><br><span class="line">                <span class="keyword">del</span> intervals[i]</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> intervals[i].start &lt;= intervals[i<span class="number">-1</span>].end <span class="keyword">and</span> intervals[i].end &gt;= intervals[i<span class="number">-1</span>].end:</span><br><span class="line">                intervals[i<span class="number">-1</span>].end = intervals[i].end</span><br><span class="line">                <span class="keyword">del</span> intervals[i]</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> intervals</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LeetCode] Pow(x, n)</title>
      <link href="/2018/06/27/LeetCode-Pow-x-n/"/>
      <url>/2018/06/27/LeetCode-Pow-x-n/</url>
      
        <content type="html"><![CDATA[<p>This problem ask us to implement the power function.<br>As the first thought, we may think it’s easy to use a recursive function or a loop.<br>Like <code>x^n = x * x^(n-1)</code><br>However, it’s O(n) time and may encounter LTE for being too slow.<br>Our ideal time complexity is O(logn) instead of O(n).  </p><p>In fact, for <code>x^n</code>, we can divide it into <code>x^(n/2) * x^(n/2)</code><br>so that we can reach logn time.<br>For this solution, all we need to worry about is odd numbers which cannot be divided by 2.<br>Let’s take <code>x^7</code> as an example. We can take separate it into <code>x * x^3 * x^3</code>.<br>That is to say, for odd numbers, all we need to do is calculate x//2 and times one more time x.  </p><p>We also need to handle unusual cases like negative power.<br>Fortunately, we can just calculate it by return the reciprocal of itself.  </p><p>Let’s look at the code.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @param: x: the base number</span></span><br><span class="line"><span class="string">    @param: n: the power number</span></span><br><span class="line"><span class="string">    @return: the result</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myPow</span><span class="params">(self, x, n)</span>:</span></span><br><span class="line">        <span class="comment"># write your code here</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            half = power(x, n // <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>: <span class="keyword">return</span> half * half</span><br><span class="line">            <span class="keyword">return</span> x * half * half</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">0</span>: <span class="keyword">return</span> <span class="number">1</span>/power(x, -n)</span><br><span class="line">        <span class="keyword">return</span> power(x, n)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LeetCode] Beautiful Arrangement</title>
      <link href="/2018/06/27/LeetCode-Beautiful-Arrangement/"/>
      <url>/2018/06/27/LeetCode-Beautiful-Arrangement/</url>
      
        <content type="html"><![CDATA[<p>Because the number N is smaller than 15, we can use recursion without worrying too much.</p><p>Below is the first solution I came up with, however, this contains side effect within recursive function.  </p><p>I’m trying to think of the way without side effect.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @param N: The number of integers</span></span><br><span class="line"><span class="string">    @return: The number of beautiful arrangements you can construct</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countArrangement</span><span class="params">(self, N)</span>:</span></span><br><span class="line">        <span class="comment"># Write your code here</span></span><br><span class="line">        self.ans = <span class="number">0</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">compute</span><span class="params">(unvisited, index)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> len(unvisited) == <span class="number">0</span>:</span><br><span class="line">                self.ans += <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(unvisited)):</span><br><span class="line">                s = unvisited[i]</span><br><span class="line">                <span class="keyword">if</span> s % index == <span class="number">0</span> <span class="keyword">or</span> index % s == <span class="number">0</span>:</span><br><span class="line">                    unvisit = unvisited[:i] + unvisited[i+<span class="number">1</span>:]</span><br><span class="line">                    compute(unvisit, index + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        n = list(range(<span class="number">1</span>, N + <span class="number">1</span>))</span><br><span class="line">        compute(n, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> self.ans</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LeetCode] Longest Absolute File Path</title>
      <link href="/2018/06/26/LeetCode-Longest-Absolute-File-Path/"/>
      <url>/2018/06/26/LeetCode-Longest-Absolute-File-Path/</url>
      
        <content type="html"><![CDATA[<p>This question is tricky – not just finding the deepest nested file, but the longest string.<br>For example, “dir/a/b/c/d/e/f/g/h.txt” is shorter than “dir/abcdefghijklmnopqrstuvwxy.txt”  </p><p>There are also the weird test cases: sometimes there are meaningless empty spaces which you have to strip off first<br>Also, if there are directories but no “files” you have to return 0</p><p>I used a stack to keep track of the file path so far and the depth so far<br>If we see the current directory is less depth, we need to pop elements<br>Whenever we see a file (check if current directory is file by using str.find(‘.’) )<br>we compute the total length and compare to the longest length so far  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @param input: an abstract file system</span></span><br><span class="line"><span class="string">    @return: return the length of the longest absolute path to file</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthLongestPath</span><span class="params">(self, input)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> input == <span class="string">''</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        paths = input.split(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(paths) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> input.find(<span class="string">'.'</span>) &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> len(paths[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">else</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        stack = [paths.pop(<span class="number">0</span>)]</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        depth = <span class="number">0</span></span><br><span class="line">        <span class="comment">#import pdb; pdb.set_trace()</span></span><br><span class="line">        <span class="keyword">while</span> len(paths) &gt; <span class="number">0</span>:</span><br><span class="line">            cur_dir = paths.pop(<span class="number">0</span>)</span><br><span class="line">            cur_dir = cur_dir.split(<span class="string">'\t'</span>)</span><br><span class="line">            cur_depth = len(cur_dir) - <span class="number">1</span></span><br><span class="line">            cur = cur_dir[<span class="number">-1</span>]</span><br><span class="line">            cur = cur.replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> cur_depth &lt;= depth:</span><br><span class="line">                <span class="keyword">while</span> cur_depth &lt;= depth:</span><br><span class="line">                    stack.pop()</span><br><span class="line">                    depth -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> cur.find(<span class="string">'.'</span>) &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># is file. find length and update</span></span><br><span class="line">                l = len(<span class="string">'/'</span>.join(stack)) + len(cur) + <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> l &gt; ans: ans = l</span><br><span class="line">            <span class="keyword">else</span>: <span class="comment"># is dir, push and add depth</span></span><br><span class="line">                stack.append(cur)</span><br><span class="line">                depth += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LeetCode] Recommended Resources</title>
      <link href="/2018/06/25/LeetCode-Recommended-Resources/"/>
      <url>/2018/06/25/LeetCode-Recommended-Resources/</url>
      
        <content type="html"><![CDATA[<p>These are the things you should understand before starting Leetcoding</p><h2 id="Data-Structure"><a href="#Data-Structure" class="headerlink" title="Data Structure"></a>Data Structure</h2><p>Trie / Prefix Tree<br><a href="https://www.youtube.com/watch?v=ibjEGG7ylHk&amp;list=PLDV1Zeh2NRsBI1C-mR6ZhHTyfoEJWlxvq" target="_blank" rel="noopener">Video</a></p><p>Fenwick Tree / Binary Indexed Tree<br><a href="https://www.youtube.com/playlist?list=PLDV1Zeh2NRsCvoyP-bztk6uXAYoyZg_U9" target="_blank" rel="noopener">Video</a></p><p>Tree / Binary Search Tree</p><p>Heap</p><p>AVL Tree</p><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p>DFS / BFS (Iterative and Recursive solutions)</p><p>Dijsktra’s Algorithm</p><p>Union Find</p><p>Recursion</p><p>Dynamic Programming (Knapsack, Longest Common Substring and Subsequence)</p><p>KMP Algorithm</p><h2 id="Useful-Resources"><a href="#Useful-Resources" class="headerlink" title="Useful Resources"></a>Useful Resources</h2><p><a href="https://www.youtube.com/watch?v=ibjEGG7ylHk&amp;list=PLDV1Zeh2NRsBI1C-mR6ZhHTyfoEJWlxvq" target="_blank" rel="noopener">William Fiset’s Video</a><br>I strongly recommend his videos. They’re clear and well-paced, the diagrams are beautiful and easy to remember. He not only talks about the concept but also provides implementation code.  </p><p><a href="https://www.geeksforgeeks.org/" target="_blank" rel="noopener">Geeksforgeeks</a><br>This is a website that has many leetcode problems explained and data structure and algorithms, too.  </p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LeetCode] Min Stack (Python3)</title>
      <link href="/2018/06/23/LeetCode-Min-Stack-Python3/"/>
      <url>/2018/06/23/LeetCode-Min-Stack-Python3/</url>
      
        <content type="html"><![CDATA[<p>Thoughts:</p><p>The first thing that came to my mind was to maintain a min value. However, if there are multiple min value in the stack, it’s impossible to check whether the min value has changed when popping out a value.</p><p>Luckily, the specialty of stacks make sure that you always know what value is popped. Therefore, by maintaining “the current min value” stack allows us to easily trace back previous min values.</p><p>When pushing a new value into the stack, check the min value and pop in the new min (whether it’s changed or not) into the second stack as well. Therefore, when you are popping elements, you simply need to pop element from the second stack to restore previous min value. This works because if the min is updated then it must because of the top value in stack, so if you pop the top element then it will go back to before.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># do intialization if necessary</span></span><br><span class="line">        self.stack = []</span><br><span class="line">        self.stack2 = []</span><br><span class="line">        self.minimum = <span class="keyword">None</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @param: number: An integer</span></span><br><span class="line"><span class="string">    @return: nothing</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, number)</span>:</span></span><br><span class="line">        <span class="comment"># write your code here</span></span><br><span class="line">        self.stack.append(number)</span><br><span class="line">        <span class="keyword">if</span> len(self.stack2) == <span class="number">0</span> <span class="keyword">or</span> number &lt;= self.stack2[<span class="number">-1</span>]:</span><br><span class="line">            self.stack2.append(number)</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @return: An integer</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># write your code here</span></span><br><span class="line">        <span class="keyword">if</span> self.stack[<span class="number">-1</span>] == self.stack2[<span class="number">-1</span>]:</span><br><span class="line">            self.stack2.pop()</span><br><span class="line">        <span class="keyword">return</span> self.stack.pop()</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @return: An integer</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">min</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># write your code here</span></span><br><span class="line">        <span class="keyword">return</span> self.stack2[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LeetCode] Search a 2D Matrix II (Python3)</title>
      <link href="/2018/06/23/LeetCode-Search-a-2D-Matrix-II-Python3/"/>
      <url>/2018/06/23/LeetCode-Search-a-2D-Matrix-II-Python3/</url>
      
        <content type="html"><![CDATA[<p>The search itself is pretty heuristic; the important question is, where to start?</p><p>It’s common to think that you should start from the origin, left-top corner. However, it is not the best idea because it’s the smallest, and you will have to go radially because the distribution is symmetrical according to the diagonal line from top-left to bottom-right.</p><p>That is to say, if you search from bottom-left, or top-right, and go diagonally, you will only search the minimum elements, which is the most efficient.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @param matrix: A list of lists of integers</span></span><br><span class="line"><span class="string">    @param target: An integer you want to search in matrix</span></span><br><span class="line"><span class="string">    @return: An integer indicate the total occurrence of target in the given matrix</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchMatrix</span><span class="params">(self, matrix, target)</span>:</span></span><br><span class="line">        <span class="comment"># write your code here</span></span><br><span class="line">        <span class="keyword">if</span> matrix == []: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        i = len(matrix) - <span class="number">1</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        n = len(matrix[<span class="number">0</span>])</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">if</span> matrix[i][j] == target:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="comment"># not equal</span></span><br><span class="line">            <span class="keyword">elif</span> matrix[i][j] &lt; target:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="comment"># bigger</span></span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> j &gt;= n:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LeetCode] Find Peak Element</title>
      <link href="/2018/06/23/LeetCode-Find-Peak-Element/"/>
      <url>/2018/06/23/LeetCode-Find-Peak-Element/</url>
      
        <content type="html"><![CDATA[<p>An intuitive way would be just loop through all the elements and check whether it’s a peak element.</p><p>Best case: O(1), average case: O(n), worse case: O(n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @param: A: An integers array.</span></span><br><span class="line"><span class="string">    @return: return any of peek positions.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findPeak</span><span class="params">(self, A)</span>:</span></span><br><span class="line">        <span class="comment"># write your code here</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(A)<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> A[i] &gt; A[i<span class="number">-1</span>] <span class="keyword">and</span> A[i] &gt; A[i+<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure><p>However, this will result in TLE (Time Limit Exceeded) for longer inputs.</p><p>How can we improve the result? To get a time complexity better than O(n), we should try to reach O(log(n)). When we see log(n), it’s easy to think about binary search.</p><p>If we check any point and its right side is increasing, then one peak must exist at the right; on the other hand, if left side is increasing, then one peak must exist at the left. We can use this heuristic to keep lowering the search range and eventually will find a peak.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @param: A: An integers array.</span></span><br><span class="line"><span class="string">    @return: return any of peek positions.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findPeak</span><span class="params">(self, A)</span>:</span></span><br><span class="line">        <span class="comment"># write your code here</span></span><br><span class="line">        l = <span class="number">0</span></span><br><span class="line">        r = len(A)<span class="number">-1</span></span><br><span class="line">        m = (r - l)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> l + <span class="number">1</span> &lt; r:</span><br><span class="line">            <span class="keyword">if</span> A[m] &gt; A[m<span class="number">-1</span>] <span class="keyword">and</span> A[m] &gt; A[m+<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> m</span><br><span class="line">            <span class="keyword">elif</span> A[m+<span class="number">1</span>] &gt; A[m]: <span class="comment"># peak to the right</span></span><br><span class="line">                l = m</span><br><span class="line">            <span class="keyword">else</span>: <span class="comment"># peak to the left, or both sides</span></span><br><span class="line">                r = m</span><br><span class="line">            m = (r - l)//<span class="number">2</span> + l</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LeetCode] Next Permutation</title>
      <link href="/2018/06/23/LeetCode-Next-Permutation/"/>
      <url>/2018/06/23/LeetCode-Next-Permutation/</url>
      
        <content type="html"><![CDATA[<p>This is a tricky problem. Instead of thinking it as permutations, I suggest look at it as numbers. Therefore the next permutation is simply the next smallest number possible consists of those digits.</p><p>After observation, we can see some pattern in the examples:</p><ul><li>If the last n digits are not in descending order, that mean you simply need to re-order them to make the next possible smallest number</li><li>However, if the last n digits are already in descending order, you have to change the last n+1 digit to make this happen because the last n digits is already the biggest number</li><li>If all the digits are in descending order, the next permutation the everything in ascending order</li></ul><p>From these rules, we can construct a formula:</p><p><img src="http://sites.bxmc.poly.edu/~kaihanchang/Thesis/wp-content/uploads/2018/06/Screen-Shot-2018-06-10-at-2.00.09-AM.png" alt=""></p><p>And thus the code below:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @param nums: A list of integers</span></span><br><span class="line"><span class="string">    @return: A list of integers</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextPermutation</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="comment"># write your code here</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> nums</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &lt; nums[i+<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        n = nums[i]</span><br><span class="line">        a = nums[:i]</span><br><span class="line">        b = nums[i:]</span><br><span class="line">        b = sorted(b)</span><br><span class="line">        m = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            <span class="keyword">if</span> b[i] &gt; n:</span><br><span class="line">                m = b[i]</span><br><span class="line">                <span class="keyword">del</span> b[i]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">None</span>: <span class="keyword">return</span> a + b</span><br><span class="line">        <span class="keyword">return</span> a + [m] + b</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LeetCode] 88. Merge Sorted Array</title>
      <link href="/2018/06/23/LeetCode-88-Merge-Sorted-Array/"/>
      <url>/2018/06/23/LeetCode-88-Merge-Sorted-Array/</url>
      
        <content type="html"><![CDATA[<p>I think this is pretty straightforward. Use a pointer to find the position for elements in nums2 array to insert.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, nums1, m, nums2, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums1: List[int]</span></span><br><span class="line"><span class="string">        :type m: int</span></span><br><span class="line"><span class="string">        :type nums2: List[int]</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: void Do not return anything, modify nums1 in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums2:</span><br><span class="line">            <span class="comment"># find pos in nums1</span></span><br><span class="line">            <span class="keyword">while</span> i &lt;= m:</span><br><span class="line">                <span class="keyword">if</span> i == m:</span><br><span class="line">                    <span class="comment"># end, append</span></span><br><span class="line">                    nums1.insert(i, num)</span><br><span class="line">                    m += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">del</span> nums1[<span class="number">-1</span>]</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> nums1[i] &lt; num:</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># nums1[i] &gt;= n, insert number</span></span><br><span class="line">                nums1.insert(i, num)</span><br><span class="line">                m += <span class="number">1</span></span><br><span class="line">                <span class="keyword">del</span> nums1[<span class="number">-1</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>However, this is not the fastest because every time we need to push back the array to insert, also, del in Python is O(n) operation. How can we improve?<br>We can utilize the empty space left in nums1 array and compare from the back. Also, this solution is more generalized because the previous one is only for 2 array, but this works for multiple arrays.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, nums1, m, nums2, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums1: List[int]</span></span><br><span class="line"><span class="string">        :type m: int</span></span><br><span class="line"><span class="string">        :type nums2: List[int]</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: void Do not return anything, modify nums1 in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        i = m - <span class="number">1</span></span><br><span class="line">        j = n - <span class="number">1</span></span><br><span class="line">        pos = m + n - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span> <span class="keyword">and</span> j &gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> nums1[i] &gt; nums2[j]:</span><br><span class="line">                nums1[pos] = nums1[i]</span><br><span class="line">                pos -= <span class="number">1</span></span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nums1[pos] = nums2[j]</span><br><span class="line">                pos -= <span class="number">1</span></span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">        <span class="comment"># if there's still nums2 left</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span>:</span><br><span class="line">            nums1[pos] = nums2[j]</span><br><span class="line">            pos -= <span class="number">1</span>p</span><br><span class="line">            j -= <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LeetCode] Plus One</title>
      <link href="/2018/06/23/LeetCode-Plus-One/"/>
      <url>/2018/06/23/LeetCode-Plus-One/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @param digits: a number represented as an array of digits</span></span><br><span class="line"><span class="string">    @return: the result</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plusOne</span><span class="params">(self, digits)</span>:</span></span><br><span class="line">        <span class="comment"># write your code here</span></span><br><span class="line">        num = <span class="number">0</span></span><br><span class="line">        power = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(digits)<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            num += digits[i] * power</span><br><span class="line">            power *= <span class="number">10</span></span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        num = str(num)</span><br><span class="line">        <span class="keyword">return</span> list(map(int, list(num)))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LeetCode] Number of Matching Subsequence</title>
      <link href="/2018/06/21/LeetCode-Number-of-Matching-Subsequence/"/>
      <url>/2018/06/21/LeetCode-Number-of-Matching-Subsequence/</url>
      
        <content type="html"><![CDATA[<p>This problem is similar to LeetCode - Is Subsequence.<br>However, we cannot use the same method because this time we have multiple strings to compare at<br> the same time. And if we do use the same method it would result in TLE.<br>Therefore, we can utilize hash map to compare all the words at the same time.</p><p>We go through S and for each character we see if it’s also in words.<br>And then we can slice the word string so that it only contains the rest of the string.<br>Once a word is empty string we know that all its characters are found in S, and thus it is S’s subsequence.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numMatchingSubseq</span><span class="params">(self, S, words)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type S: str</span></span><br><span class="line"><span class="string">        :type words: List[str]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        d = collections.defaultdict(list)</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> words:</span><br><span class="line">            d[w[<span class="number">0</span>]].append(w[<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> S:</span><br><span class="line">            wait = []</span><br><span class="line">            <span class="keyword">if</span> s <span class="keyword">in</span> d:</span><br><span class="line">                <span class="keyword">while</span> len(d[s]) &gt; <span class="number">0</span>:</span><br><span class="line">                    w = d[s].pop()</span><br><span class="line">                    <span class="keyword">if</span> len(w) == <span class="number">0</span>: ans += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>: wait.append(w)</span><br><span class="line">                <span class="keyword">for</span> w <span class="keyword">in</span> wait:</span><br><span class="line">                    d[w[<span class="number">0</span>]].append(w[<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LeetCode] Implement Trie</title>
      <link href="/2018/06/21/Implement-Trie/"/>
      <url>/2018/06/21/Implement-Trie/</url>
      
        <content type="html"><![CDATA[<p>LeetCode 208. Implement Trie (Prefix Tree)</p><p>Solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.is_word = <span class="keyword">False</span></span><br><span class="line">        self.chars = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.root = TrieNode()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Inserts a word into the trie.</span></span><br><span class="line"><span class="string">        :type word: str</span></span><br><span class="line"><span class="string">        :rtype: void</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> w <span class="keyword">not</span> <span class="keyword">in</span> node.chars:</span><br><span class="line">                node.chars[w] = TrieNode()</span><br><span class="line">            node = node.chars[w]</span><br><span class="line">        node.is_word = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns if the word is in the trie.</span></span><br><span class="line"><span class="string">        :type word: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> w <span class="keyword">not</span> <span class="keyword">in</span> node.chars:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            node = node.chars[w]</span><br><span class="line">        <span class="keyword">return</span> node.is_word</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startsWith</span><span class="params">(self, prefix)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns if there is any word in the trie that starts with the given prefix.</span></span><br><span class="line"><span class="string">        :type prefix: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> prefix:</span><br><span class="line">            <span class="keyword">if</span> w <span class="keyword">not</span> <span class="keyword">in</span> node.chars:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            node = node.chars[w]</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your Trie object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = Trie()</span></span><br><span class="line"><span class="comment"># obj.insert(word)</span></span><br><span class="line"><span class="comment"># param_2 = obj.search(word)</span></span><br><span class="line"><span class="comment"># param_3 = obj.startsWith(prefix)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/06/21/hello-world/"/>
      <url>/2018/06/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
